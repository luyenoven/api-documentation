swagger: "2.0"
info:
  version: "1.0.0"
  title: "DAG API"
host: "http://localhost"
basePath: "/api"
tags:
- name: "login"
  description: "Members Login system"
  externalDocs:
    description: "url: http://localhost"
    url: "http://localhost"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "url: http://localhost"
    url: "http://localhost"
# schemes:
# - "https"
# - "http"
paths:
  /login:
    post:
      tags:
      - "login"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                description: "Success"
              message:
                type: "string"
                description: "login success"
              data:
                type: "object"
                properties:
                  token_type:
                    type: "string"
                    format: "Bearer"
                  access_token:
                    type: "string"
                  expires_at:
                    type: "string"
                    format: "date-time"
        "400":
          description: "Incorrect email/password"
  /logout:
    get:
      tags:
      - "login"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          schema:
            type: "object"
            properties:
              status:
                type: "boolean"
                description: "Success"
              message:
                type: "string"
                description: "Logout success"
  /forgotpass:
    post:
      tags:
      - "login"
      summary: "User forgot password"
      description: "method will be send email to reset password"
      operationId: "userForgotPassword"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "Email to receive link reset password or new password to login"
        required: true
        type: "string"
        format: "email"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            properties:
              status:
                type: "boolean"
                description: "success/Faild"
              message:
                type: "string"
                description: "Alert content to user"
        "400":
          description: "Email does not exist"
  /resetpass/{resetPasswordToken}:
    post:
      tags:
      - "login"
      summary: "User reset password"
      description: "reset password"
      operationId: "userResetPassword"
      produces:
      - "application/json"
      parameters:
      - name: "password"
        in: "query"
        description: "New password for login"
        required: true
        type: "string"
      - name: "confirm_password"
        in: "query"
        description: "Confirm new password for login"
        required: true
        type: "string"
      responses:
        default:
          description: "response reset password"
  
  /user:
    get:
      tags:
      - "user"
      summary: "Listing user"
      description: "This can only be done by the logged in user."
      operationId: "listingUser"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "Redirect to User listing"
  /user/changepass:
    post:
      tags:
      - "user"
      summary: "User change password"
      description: "This can only be done by the logged in user."
      operationId: "changepassword"
      produces:
      - "application/json"
      parameters:
      - name: "old_password"
        in: "query"
        description: "The ID that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "New password for login"
        required: true
        type: "string"
      - name: "confirm_password"
        in: "query"
        description: "Confirm new password for login"
        required: true
        type: "string"
      responses:
        default:
          description: ""
          schema:
            type: "object"
            properties:
              status:
                type: "boolean"
                description: "True: Success or False: not success. If status equal TRUE, sign out system"
              message:
                type: "string"
                description: "Alert content"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by user login ID"
      description: ""
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Redirect to User listing"
        "400":
          description: "Invalid userId supplied"
        "404":
          description: "UserId not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

#securityDefinitions:
#  petstore_auth:
#    type: "oauth2"
#    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#    flow: "implicit"
#    scopes:
#      write:pets: "modify pets in your account"
#      read:pets: "read your pets"
#  api_key:
#    type: "apiKey"
#    name: "api_key"
#    in: "header"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
#  ApiResponse:
#    type: "object"
#    properties:
#      code:
#        type: "integer"
#        format: "int32"
#      type:
#        type: "string"
#      message:
#        type: "string"
# externalDocs:
#  description: "Find out more about Swagger"
#  url: "http://swagger.io"